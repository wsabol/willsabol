# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Test and Deploy

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout project
        uses: actions/checkout@v4

      - name: Setup PHP Action
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: json, mysqli
          tools: composer
        id: php

      - name: Write env file
        run: |
          touch .env
          echo "DB_HOST=127.0.0.1" >> .env
          echo "DB_USERNAME=testuser" >> .env
          echo "DB_PASSWORD=testpsw" >> .env
          echo "PRODUCTION=1" >> .env

      - name: Install dependencies
        run: composer install

      - name: Run Tests
        run: vendor/bin/phpunit tests --do-not-cache-result --colors

  check-lib-changes:
    name: Check for lib/* changes
    needs: test
    runs-on: ubuntu-latest

    outputs:
      build: ${{ steps.diff.outputs.found-changes }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Ensure we fetch full history for proper diff comparison

      - name: Determine base commit
        id: base_commit
        run: |
          BASE_COMMIT=$(git merge-base origin/${{ github.event.repository.default_branch }} HEAD)
          echo "base-commit=$BASE_COMMIT" >> "$GITHUB_ENV"

      - name: Check for changes in lib/*
        id: diff
        run: |
          if git diff --quiet ${{ env.base-commit }}~1 HEAD -- lib/; then
            echo "nothing found in lib, trigger pull"
            echo "found-changes=false" >> "$GITHUB_OUTPUT"
          else
            echo "changes found in lib, run build and deploy"
            echo "found-changes=true" >> "$GITHUB_OUTPUT"
          fi

  build:
    name: Build & Deploy
    needs: check-lib-changes
    if: needs.check-lib-changes.outputs.build == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install dependencies
        run: npm ci
        working-directory: 'lib'

      - name: Build project
        run: npm run build
        working-directory: 'lib'

      - name: Trigger pull
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          port: ${{ secrets.PORT }}
          script: |
            cd ${{ secrets.PATH_TO_REPO }}
            git pull

      - name: Deploy JS artifact
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          port: ${{ secrets.PORT }}
          source: 'js/*'
          target: ${{ secrets.PATH_TO_REPO }}

      - name: Deploy CSS artifact
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          port: ${{ secrets.PORT }}
          source: 'css/*'
          target: ${{ secrets.PATH_TO_REPO }}

  deploy:
    name: Trigger Pull
    needs: check-lib-changes
    if: needs.check-lib-changes.outputs.build == 'false'
    runs-on: ubuntu-latest

    steps:

      - name: Trigger pull
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          port: ${{ secrets.PORT }}
          script: |
            cd ${{ secrets.PATH_TO_REPO }}
            git pull
